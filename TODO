Idea now is, there's a rule engine that is agnostic to players. It just switches between them, and checks if what they try to do is do-able.
First the game will be developed in human vs human mode.
Then I can plug an opponent based on tavli3d

1. create action creators
2. create scene & action constants (& others if needed)
3. create scene intializers
4. move new-engine & cli.js to src (cli.js out of new-engine, to a FEs dir)
5. check[Action] functions need to move, maybe to actions

M1:
- do remaining TODOs on scene.js
- apply moves
- allow using more than one dice at a single move
- check the rule that if there are moves limiting the dice that can be used, they are ignored in favor of ones that allow using all dice, if any.
- do get allowed moves
- add proper printing of frame state, options
- remove magic strings as much as possible, cleanup & organize files

M1: Play on cli, with both players human
M2: Cli, with pc opponent
M3: UI version

After MVP:
- add crypto dice roll
- icon, manifest, sw.js
- cleanup, refactor code
